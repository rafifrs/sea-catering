// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  role          String          @default("USER") // Bisa "USER" atau "ADMIN"
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  subscriptions Subscription[]
  testimonials  Testimonial[]
}

model Subscription {
  id            String   @id @default(cuid())
  planName      String   // e.g., "Protein Plan"
  mealTypes     String[] // e.g., ["Breakfast", "Dinner"]
  deliveryDays  String[] // e.g., ["Monday", "Tuesday"]
  totalPrice    Float
  allergies     String?  // Tanda tanya (?) berarti opsional
  status        String   @default("ACTIVE") // "ACTIVE", "PAUSED", "CANCELLED"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  pauseStartDate DateTime?
  pauseEndDate   DateTime?
  reactivatedAt  DateTime?
  cancelledAt     DateTime? 
}

model Testimonial {
  id            String   @id @default(cuid())
  customerName  String
  reviewMessage String
  rating        Int
  createdAt     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model MealPlan {
  id          String   @id @default(cuid())
  name        String
  price       Decimal
  description String
  duration    String   // e.g., "Weekly", "Monthly"
  category    String   // e.g., "Weight Loss", "Muscle Gain", "Balanced"
  features    String[] // Array of plan features
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  meals       Meal[]
}

model Meal {
  id           String   @id @default(cuid())
  name         String
  description  String
  calories     Int?
  protein      Float?
  carbs        Float?
  fats         Float?
  mealType     String   // "Breakfast", "Lunch", "Dinner", "Snack"
  
  mealPlanId   String
  mealPlan     MealPlan @relation(fields: [mealPlanId], references: [id])
}